{"version":3,"sources":["components/Chatbot.js","components/List.js","App.js","index.js"],"names":["btnOptions","Button","val","btnCallback","className","onClick","Chatbot","useState","btnPressVal","setBtnPressVal","handle_click","console","log","style","maxWidth","map","index","key","List","list1","list2","list2State","setList2State","useEffect","item","id","type","ref","el","push","concat","reduce","total","checked","to","App","exact","path","component","ListComponenet","ChatbotComponent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAGMA,EAAa,CACjB,UACA,UACA,UACA,UACA,UACA,WA4BIC,EAAS,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,YACrB,OACE,uBACEC,UAAU,uCACVC,QAAS,kBAAMF,EAAYD,KAE1BA,IAKQI,EApCC,WAAO,IAAD,EACkBC,oBAAS,GAD3B,mBACbC,EADa,KACAC,EADA,KAEdC,EAAe,SAACR,GACpBO,EAAeP,GACfS,QAAQC,IAAIV,IAEd,OACE,yBAAKE,UAAU,YACb,uBAAGA,UAAU,SAAb,gBACA,yBAAKA,UAAU,UAAUS,MAAO,CAAEC,SAAU,UACzCd,EAAWe,KAAI,SAACb,EAAKc,GAAN,OACd,kBAAC,EAAD,CAAQd,IAAKA,EAAKe,IAAKD,EAAOb,YAAaO,QAG/C,uBAAGN,UAAU,aAAb,sBACsBI,GAA4B,oBAElD,6BACA,6BACA,6BACA,+B,OC6ESU,EA3GF,WACX,IACIC,EAAQ,GACRC,EAAQ,GAHK,EAKmBb,mBAAS,IAL5B,mBAKVc,EALU,KAKEC,EALF,KAOjBC,qBAAU,WACRZ,QAAQC,IAAI,gBAAiBQ,MA8B/B,OACE,yBAAKhB,UAAU,WACb,uBAAGA,UAAU,SAAb,cACA,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,sCACb,uBAAGA,UAAU,SAAb,WA3CQ,CAAC,QAAS,QAAS,QAAS,QAAS,SA4ClCW,KAAI,SAACS,EAAMR,GACpB,OACE,oCACE,+BACE,0BAAMZ,UAAU,YAAYoB,IAE9B,2BACEC,GAAID,EACJP,IAAKD,EACLU,KAAK,WACLC,IAAK,SAACC,GAAD,OAAQT,EAAMU,KAAKD,MAE1B,mCAMV,yBAAKxB,UAAU,kBACb,yBAAKA,UAAU,mCACb,6BACA,4BAAQA,UAAU,iBAAiBC,QA3C3B,WAChBiB,EACED,EAAWS,OACTX,EAAMY,QAAO,SAACC,EAAOR,GAKnB,OAJIA,EAAKS,SACPD,EAAMH,KAAKL,EAAKC,IAElBD,EAAKS,SAAU,EACRD,IACN,QAkCC,OAGA,6BACA,6BACA,4BAAQ5B,UAAU,mBAAmBC,QA7D7B,WAChBiB,EACEF,EAAMW,QAAO,SAACC,EAAOR,GAKnB,OAJqB,IAAjBA,EAAKS,SACPD,EAAMH,KAAKL,EAAKC,IAElBD,EAAKS,SAAU,EACRD,IACN,OAqDG,UAGA,+BAGJ,yBAAK5B,UAAU,kBACb,yBAAKA,UAAU,sCACb,uBAAGA,UAAU,SAAb,UACCiB,EAAWN,KAAI,SAACS,EAAMR,GACrB,OACE,oCACE,+BACE,0BAAMZ,UAAU,YAAYoB,IAE9B,2BACEC,GAAID,EACJP,IAAKD,EACLU,KAAK,WACLC,IAAK,SAACC,GAAD,OAAQR,EAAMS,KAAKD,MAE1B,oCAQZ,kBAAC,IAAD,CAAMM,GAAG,WAAW9B,UAAU,4BAA9B,wB,OCxFS+B,MAVf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,WAAWC,UAAWE,OCLhDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1b44081c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n// import Button from \"./Button.js\";\n\nconst btnOptions = [\n  \"option1\",\n  \"option2\",\n  \"option3\",\n  \"option4\",\n  \"option5\",\n  \"option6\",\n];\n\nconst Chatbot = () => {\n  const [btnPressVal, setBtnPressVal] = useState(false);\n  const handle_click = (val) => {\n    setBtnPressVal(val);\n    console.log(val);\n  };\n  return (\n    <div className=\"section \">\n      <p className=\"title\"> Exercise 1 </p>\n      <div className=\"buttons\" style={{ maxWidth: \"500px\" }}>\n        {btnOptions.map((val, index) => (\n          <Button val={val} key={index} btnCallback={handle_click} />\n        ))}\n      </div>\n      <p className=\"is-size-3\">\n        You Just Pressed : {btnPressVal ? btnPressVal : \"press any button\"}\n      </p>\n      <br />\n      <br />\n      <br />\n      <br />\n    </div>\n  );\n};\n\nconst Button = ({ val, btnCallback }) => {\n  return (\n    <a\n      className=\"button is-medium is-outlined is-dark\"\n      onClick={() => btnCallback(val)}\n    >\n      {val}\n    </a>\n  );\n};\n\nexport default Chatbot;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nconst List = () => {\n  const listItems = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\"];\n  let list1 = [];\n  let list2 = [];\n  // react hook\n  const [list2State, setList2State] = useState([]);\n  //  delete btn handle\n  useEffect(() => {\n    console.log(\"updated_list2\", list2);\n  });\n  const handleDel = () => {\n    setList2State(\n      list2.reduce((total, item) => {\n        if (item.checked === false) {\n          total.push(item.id);\n        }\n        item.checked = false;\n        return total;\n      }, [])\n      // callback_fn()\n    );\n  };\n  //  add btn handle\n  const handleAdd = () => {\n    setList2State(\n      list2State.concat(\n        list1.reduce((total, item) => {\n          if (item.checked) {\n            total.push(item.id);\n          }\n          item.checked = false;\n          return total;\n        }, [])\n        // callback_fn\n      )\n    );\n  };\n\n  return (\n    <div className=\"section\">\n      <p className=\"title\">Exercise 2</p>\n      <div className=\"tile is-ancestor\">\n        <div className=\"tile is-parent\">\n          <div className=\"tile is-child notification is-dark\">\n            <p className=\"title\">List 1 </p>\n            {listItems.map((item, index) => {\n              return (\n                <>\n                  <label>\n                    <span className=\"subtitle\">{item}</span>\n                  </label>\n                  <input\n                    id={item}\n                    key={index}\n                    type=\"checkbox\"\n                    ref={(el) => list1.push(el)}\n                  />\n                  <br />\n                </>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"tile is-parent\">\n          <div className=\"tile is-child has-text-centered\">\n            <br />\n            <button className=\"button is-link\" onClick={handleAdd}>\n              Add\n            </button>\n            <br />\n            <br />\n            <button className=\"button is-danger\" onClick={handleDel}>\n              Delete\n            </button>\n            <br />\n          </div>\n        </div>\n        <div className=\"tile is-parent\">\n          <div className=\"tile is-child notification is-dark\">\n            <p className=\"title\">List 2</p>\n            {list2State.map((item, index) => {\n              return (\n                <>\n                  <label>\n                    <span className=\"subtitle\">{item}</span>\n                  </label>\n                  <input\n                    id={item}\n                    key={index}\n                    type=\"checkbox\"\n                    ref={(el) => list2.push(el)}\n                  />\n                  <br />\n                </>\n              );\n            })}\n            {}\n          </div>\n        </div>\n      </div>\n      <Link to=\"/chatbot\" className=\"button is-link is-medium\">\n        Link to exercise 1\n      </Link>\n    </div>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport ChatbotComponent from \"./components/Chatbot.js\";\nimport ListComponenet from \"./components/List.js\";\nimport { Route, HashRouter, Switch } from \"react-router-dom\";\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={ListComponenet} />\n        <Route exact path=\"/chatbot\" component={ChatbotComponent} />\n      </Switch>\n    </HashRouter>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}